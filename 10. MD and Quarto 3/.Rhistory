install.packages("quarto")
quarto::check()
quarto::quarto_version()
load("../Data/season_1.RData")
season_data <- read.csv(paste0("Data/season", params$season, ".csv"))
install.packages("rvest")
library(rvest)
#| label = "viewers_plot"
plot(season_data$viewers, type="l", col="red", lwd=5, xlab = "Episode number", ylab = "1st day TV viewers in the US (millions)")
#| label = "viewers_plot"
plot(season_data$viewers, type="l", col="red", lwd=5, xlab = "Episode number", ylab = "1st day TV viewers in the US (millions)")
#| label = "viewers_plot"
plot(season_data$viewers, type="l", col="red", lwd=5, xlab = "Episode number", ylab = "1st day TV viewers in the US (millions)")
season_data <- read.csv(paste0("C:/Users/MI/Desktop/RR25/RRcourse2025/Data/season_", params$season, ".csv"))
# 设置输出文件的名称
output_file <- paste0(output_folder, "Season_", i, "_Report.pdf")
# 生成1-8季的报告
for (i in 1:8) {
# 设置输出文件的名称
output_file <- paste0(output_folder, "Season_", i, "_Report.pdf")
# 调用 render() 函数渲染报告
render("Assignment.qmd", output_file = output_file, params = list(season = i))
cat("Successfully generated report for Season", i, "\n")
}
# 生成1-8季的报告
for (i in 1:8) {
# 设置输出文件的名称
output_file <- paste0("Season_", i, "_Report.pdf")
# 调用 render() 函数渲染报告
render(
input = "Assignment.qmd",
output_file = output_file,
output_dir = output_folder,  # 指定输出目录
params = list(season = i)
)
cat("Successfully generated report for Season", i, "\n")
}
# 生成1-8季的报告
for (i in 1:8) {
# 设置输出文件的名称
output_file <- paste0(output_folder, "Season_", i, "_Report.pdf")
# 调用 render() 函数渲染报告
render("Assignment.qmd", output_file = output_file, params = list(season = i))
cat("Successfully generated report for Season", i, "\n")
}
# 生成1-8季的报告
for (i in 1:8) {
# 设置输出文件的名称
output_file <- paste0(output_folder, "Season_", i, "_Report.pdf")
# 调用 render() 函数渲染报告
render("Assignment.qmd", output_file = output_file, params = list(season = i))
cat("Successfully generated report for Season", i, "\n")
}
# 创建输出文件夹（如果不存在）
if (!dir.exists(output_dir)) {
dir.create(output_dir)
}
# 循环生成1到8季的报告
for (season in 1:8) {
render(
input = "Assignment.qmd",  # Quarto 源文件
output_format = "pdf",     # 输出格式可以改为 "html" 或 "pdf"
output_file = paste0("GoT_Season_", season, ".pdf"),  # 输出文件名
output_dir = output_dir,   # 输出目录
params = list(season = season)  # 传入参数
)
}
# 设置报告输出文件夹
output_folder <- "C:\Users\MI\Desktop\RR25\RRcourse2025\10. MD and Quarto 3\Reports"
# 设置报告输出文件夹
Reports <- "C:\Users\MI\Desktop\RR25\RRcourse2025\10. MD and Quarto 3\Reports"
# 生成1-8季的报告
for (i in 1:8) {
# 设置输出文件的名称
output_file <- paste0(output_folder, "Season_", i, "_Report.pdf")
# 调用 render() 函数渲染报告
render("Assignment.qmd", output_file = output_file, params = list(season = i))
cat("Successfully generated report for Season", i, "\n")
}
cat("Successfully generated report for Season", i, "\n")
# 循环渲染 1 到 8 季
for (i in 1:8) {
rmarkdown::render(
input = "Assignment.qmd",
output_format = "pdf_document",
output_file = paste0("Season_", i, "_Report.pdf"),
output_dir = output_dir,
params = list(season = i),
envir = new.env()
)
cat("✅ Successfully generated report for Season", i, "\n")
}
rmarkdown::render(
input = "Assignment.qmd",
output_format = "pdf_document",
Reports = paste0("Season_", i, "_Report.pdf"),
Reports = output_dir,
params = list(season = i),
envir = new.env()
)
season_data <- read.csv(paste0("C:/Users/MI/Desktop/RR25/RRcourse2025/Data/season_", params$season, ".csv"))
#| label = "viewers_plot"
plot(season_data$viewers, type="l", col="red", lwd=5, xlab = "Episode number", ylab = "1st day TV viewers in the US (millions)")
# 设置输出目录（请确保路径存在或可自动创建）
Reports <- "C:/Users/MI/Desktop/RR25/RRcourse2025/10. MD and Quarto 3/Reports"
# 创建输出目录（如果不存在）
if (!dir.exists(output_folder)) {
dir.create(output_folder, recursive = TRUE)
}
message("请检查输出目录: ", normalizePath(output_folder))
message("已创建输出目录: ", output_folder)
# 3. 检查并创建输出目录（如果不存在）
if (!dir.exists(output_folder)) {
dir.create(output_folder, recursive = TRUE)
message("已创建输出目录: ", output_folder)
} else {
message("输出目录已存在: ", output_folder)
}
# 2. 设置数据目录（存放CSV文件）
data <- "C:/Users/MI/Desktop/RR25/RRcourse2025/Data/"
cat("✅ Successfully generated report for Season", i, "\n")
for (i in 1:8) {
for (i in 1:8) {
quarto::quarto_render(
input = "Assignment.qmd",
output_format = "pdf",
output_file = paste0("Season_", i, "_Report.pdf"),
output_dir = output_dir,
execute_params = list(season = i)
)
cat("✅ Successfully generated report for Season", i, "\n")
}
}
quarto::quarto_render(
input = "Assignment.qmd",
output_format = "pdf",
output_file = "Season_1_Report.pdf",
output = "C:\Users\MI\Desktop\RR25\RRcourse2025\10. MD and Quarto 3\Reports",
quarto::quarto_render(
input = "Assignment.qmd",
output_format = "pdf",
output_file = output_file,
output_dir = output_dir,
execute_params = list(season = i)
)
# Render reports for all seasons
for (season_num in seasons) {
rmarkdown::render(
input = "GameOfThrones_Report_Template.Rmd",
output_file = paste0("Season_", season_num, "_Report.pdf"),
output_dir = output_dir,
params = list(season = season_num),
envir = new.env()
)
message(paste("Generated report for Season", season_num))
}
# 为1-8季生成报告
for (season_num in 1:8) {
render(
input = "GameOfThrones_Report_Template.Rmd",
output_file = paste0("Season_", season_num, "_Report.pdf"),
params = list(season = season_num)
)
}
render(
input = "Assignment.Rmd",
output_file = paste0("Season_", season_num, "_Report.pdf"),
params = list(season = season_num)
)
# 然后运行渲染代码
for (i in 1:8) {
rmarkdown::render(
"Assignment.Rmd",
output_file = paste0("Season_", i, "_Report.pdf"),
params = list(season = i)
)
}
# 设置工作目录（替换为你的实际路径）
setwd("C:\Users\MI\Desktop\RR25\RRcourse2025\10. MD and Quarto 3\Assignment.qmd")
# 设置工作目录（替换为你的实际路径）
# 每个反斜杠用两个反斜杠表示
input_path <- "C:\\Users\\MI\\Desktop\\RR25\\RRcourse2025\\Assignment.Rmd"
input_path <- here("RR25", "RRcourse2025", "Assignment.Rmd")
# 将Windows路径中的\替换为/
input_path <- "C:/Users/MI/Desktop/RR25/RRcourse2025/Assignment.Rmd"
normalizePath("Assignment.Rmd", mustWork = TRUE)
output_dir <- "C:/Users/MI/Desktop/RR25/RRcourse2025/10. MD and Quarto 3\Reports"
# 批量渲染1-8季报告
for (i in 1:8) {
output_file <- file.path(output_dir, paste0("Season_", i, "_Report.pdf"))
rmarkdown::render(
input = input_file,
output_file = output_file,
params = list(season = i),
envir = new.env()
)
message(sprintf("已生成第%d季报告: %s", i, output_file))
}
output_dir <- "C:/Users/MI/Desktop/RR25/RRcourse2025/10. MD and Quarto 3/Reports"
output <- "C:/Users/MI/Desktop/RR25/RRcourse2025/10. MD and Quarto 3/Reports"
output <- file.path(output, paste0("Season_", i, "_Report.pdf"))
rmarkdown::render(
input = input_file,
output_file = output_file,
params = list(season = i),
envir = new.env()
)
message(sprintf("已生成第%d季报告: %s", i, output_file))
# 批量渲染1-8季报告
for (i in 1:8) {
output <- file.path(output, paste0("Season_", i, "_Report.pdf"))
rmarkdown::render(
input = input_file,
output_file = output_file,
params = list(season = i),
envir = new.env()
)
message(sprintf("已生成第%d季报告: %s", i, output_file))
}
message("\n报告生成完成！请检查目录：", normalizePath(output_dir))
season_file <- paste0("C:/Users/MI/Desktop/RR25/RRcourse2025/Data/season_", params$season, ".csv")
season_data <- read.csv(season_file)
install.packages("quarto")
install.packages("quarto")
render(
input = "Assignment.Rmd",
output_file = paste0("GOT_Season_", season_num, "_Report.pdf"),
output_format = "pdf_document",
params = list(season = season_num),
encoding = "UTF-8"
)
library(knitr)
for(season_num in 1:8) {
render(
input = "Assignment.Rmd",
output_file = paste0("GOT_Season_", season_num, "_Report.pdf"),
output_format = "pdf_document",
params = list(season = season_num),
encoding = "UTF-8"
)
message(sprintf("已完成第%d季报告生成", season_num))
}
# 批量生成报告
for (season in 1:8) {
output_file <- paste0("GOT_Season_", season, "_Report.pdf")
tryCatch({
rmarkdown::render(
input = "Assignment.Rmd",  # 确保文件名一致（区分大小写！）
output_file = output_file,
params = list(season = season),
encoding = "UTF-8"
)
message("成功生成：", output_file)
}, error = function(e) {
message("生成失败：", output_file, "\n错误信息：", e$message)
})
}
# 批量生成报告
for (season in 1:8) {
output_file <- paste0("GOT_Season_", season, "_Report.pdf")
tryCatch({
rmarkdown::render(
input = "Assignment.Qmd",  # 确保文件名一致（区分大小写！）
output_file = output_file,
params = list(season = season),
encoding = "UTF-8"
)
message("成功生成：", output_file)
}, error = function(e) {
message("生成失败：", output_file, "\n错误信息：", e$message)
})
}
#| label = "viewers_plot"
plot(season_data$viewers, type="l", col="red", lwd=5, xlab = "Episode number", ylab = "1st day TV viewers in the US (millions)")
tryCatch({
rmarkdown::render(
input = "Assignment.Qmd",  # 确保文件名一致（区分大小写！）
output_file = output_file,
params = list(season = season),
encoding = "UTF-8"
)
message("成功生成：", output_file)
}, error = function(e) {
message("生成失败：", output_file, "\n错误信息：", e$message)
})
# 设置工作目录（以下二选一）
## 方法1：硬编码路径（替换为你的实际路径）
setwd("C:/Users/MI/Desktop/RR25/RRcourse2025/10. MD and Quarto 3")
# 设置工作目录（以下二选一）
## 方法1：硬编码路径（替换为你的实际路径）
setwd("C:/Users/MI/Desktop/RR25/RRcourse2025/10. MD and Quarto 3/Reports")
# 批量生成报告
for (season in 1:8) {
output_file <- paste0("GOT_Season_", season, "_Report.pdf")
tryCatch({
rmarkdown::render(
input = "Assignment.Qmd",  # 确保文件名一致（区分大小写！）
output_file = output_file,
params = list(season = season),
encoding = "UTF-8"
)
message("成功生成：", output_file)
}, error = function(e) {
message("生成失败：", output_file, "\n错误信息：", e$message)
})
}
# 设置工作目录（以下二选一）
## 方法1：硬编码路径（替换为你的实际路径）
setwd("C:/Users/MI/Desktop/RR25/RRcourse2025/10. MD and Quarto 3")
# 批量生成报告
for (season in 1:8) {
output_file <- paste0("GOT_Season_", season, "_Report.pdf")
tryCatch({
rmarkdown::render(
input = "Assignment.Qmd",  # 确保文件名一致（区分大小写！）
output_file = output_file,
params = list(season = season),
encoding = "UTF-8"
)
message("成功生成：", output_file)
}, error = function(e) {
message("生成失败：", output_file, "\n错误信息：", e$message)
})
}
